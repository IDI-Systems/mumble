// Copyright 2020 The Mumble Developers. All rights reserved.
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file at the root of the
// Mumble source tree or at <https://www.mumble.info/LICENSE>

// This code has been automatically generated via scripts/generateProtoValidator.py on 2020-04-17
// DO NOT EDIT THIS FILE MANUALLY

// This file contains validation functions for the ProtoMessages of package MumbleProto

#ifndef MUMBLE_PROTOVALIDATOR_H_
#define MUMBLE_PROTOVALIDATOR_H_

#include "Mumble.pb.h"

#include <string>

namespace ProtoValidator {
	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::Version &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::Version &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::UDPTunnel &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::UDPTunnel &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::Authenticate &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::Authenticate &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::Ping &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::Ping &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::Reject &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::Reject &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::ServerSync &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::ServerSync &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::ChannelRemove &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::ChannelRemove &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::ChannelState &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::ChannelState &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::UserRemove &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::UserRemove &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::UserState &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::UserState &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::BanList::BanEntry &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::BanList::BanEntry &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::BanList &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::BanList &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::TextMessage &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::TextMessage &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::PermissionDenied &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::PermissionDenied &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::ACL::ChanGroup &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::ACL::ChanGroup &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::ACL::ChanACL &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::ACL::ChanACL &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::ACL &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::ACL &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::QueryUsers &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::QueryUsers &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::CryptSetup &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::CryptSetup &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::ContextActionModify &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::ContextActionModify &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::ContextAction &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::ContextAction &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::UserList::User &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::UserList::User &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::UserList &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::UserList &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::VoiceTarget::Target &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::VoiceTarget::Target &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::VoiceTarget &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::VoiceTarget &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::PermissionQuery &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::PermissionQuery &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::CodecVersion &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::CodecVersion &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::UserStats::Stats &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::UserStats::Stats &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::UserStats &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::UserStats &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::RequestBlob &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::RequestBlob &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::ServerConfig &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::ServerConfig &msg);

	/// @param msg A const reference to the proto message that is validated
	/// @returns Whether the given message was considered valid
	bool isValid(const MumbleProto::SuggestConfig &msg);

	/// Turns this message into a valid one. If it is valid to begin with, no changes
	/// 	will be made to it.
	///
	/// @param msg A reference to the proto message that is validated
	/// @returns Whether the given message was ichanged
	bool makeValid(MumbleProto::SuggestConfig &msg);

}; // namespace ProtoValidator

#endif // MUMBLE_PROTOVALIDATOR_H_